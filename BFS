from collections import deque

def bfs(graph, start, end):
    visited = set()
    queue = deque([(start, [start], 0)])
   
    while queue:
        node, path, cost = queue.popleft()
       
        if node == end:
            return path, cost
       
        if node not in visited:
            visited.add(node)
           
            for neighbor in graph[node]:
                if neighbor not in visited:
                    queue.append((neighbor, path + [neighbor], cost + 1))
   
    return None, float('inf')  


graph = {
    1: [2, 3],
    2: [1, 4, 5],
    3: [1, 6, 7],
    4: [2],
    5: [2, 8],
    6: [3],
    7: [3],
    8: [5]
}

start_node = 1
end_node = 4
path, cost = bfs(graph, start_node, end_node)
if(path!=None):
    print("BFS Shortest Path:", path)
    print("Cost of Path:", cost)
else:
    print("Node not found")

