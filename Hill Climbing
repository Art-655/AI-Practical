import random
import numpy as np

def calculate_distance(route, distance_matrix):
    """Calculate the total distance of a given route."""
    total_distance = 0
    num_cities = len(route)
    for i in range(num_cities - 1):
        total_distance += distance_matrix[route[i]][route[i + 1]]
    total_distance += distance_matrix[route[-1]][route[0]]  # Return to starting city
    return total_distance

def get_neighbors(route):
    """Generate neighboring solutions by swapping two cities."""
    neighbors = []
    num_cities = len(route)
    for i in range(num_cities):
        for j in range(i + 1, num_cities):
            new_route = route[:]
            new_route[i], new_route[j] = new_route[j], new_route[i]  # Swap cities
            neighbors.append(new_route)
    return neighbors

def hill_climbing(distance_matrix):
    """Perform the Hill Climbing algorithm to find the shortest route."""
    num_cities = len(distance_matrix)
    current_route = list(range(num_cities))  # Initial random route
    random.shuffle(current_route)
    current_distance = calculate_distance(current_route, distance_matrix)
   
    while True:
        neighbors = get_neighbors(current_route)
        best_neighbor = current_route
        best_distance = current_distance
       
        for neighbor in neighbors:
            distance = calculate_distance(neighbor, distance_matrix)
            if distance < best_distance:
                best_neighbor = neighbor
                best_distance = distance
       
        if best_distance >= current_distance:
            break  # No improvement, stop the algorithm
       
        current_route, current_distance = best_neighbor, best_distance
   
    return current_route, current_distance

# Example: Define a distance matrix (symmetric TSP)
distance_matrix = np.array([
    [0, 10, 15, 20],
    [10, 0, 35, 25],
    [15, 35, 0, 30],
    [20, 25, 30, 0]
])

# Run the Hill Climbing algorithm
best_route, best_distance = hill_climbing(distance_matrix)

# Print results
print("Optimized Route:", best_route)
print("Total Distance:", best_distance)
