from collections import deque

def water_jug_problem():
    jug1_cap, jug2_cap, goal = 4, 3, 2
    visited, queue = set(), deque([(0, 0)])
    path = {}

    while queue:
        jug1, jug2 = queue.popleft()
       
        if (jug1, jug2) in visited:
            continue
        visited.add((jug1, jug2))
       
        if jug1 == goal or jug2 == goal:
            solution = []
            while (jug1, jug2) in path:
                solution.append((jug1, jug2))
                jug1, jug2 = path[(jug1, jug2)]
            solution.append((0, 0))
            return solution[::-1]

        # Possible states
        states = [
            (jug1_cap, jug2),      # Fill Jug1
            (jug1, jug2_cap),      # Fill Jug2
            (0, jug2),             # Empty Jug1
            (jug1, 0),             # Empty Jug2
            (jug1 - min(jug1, jug2_cap - jug2), jug2 + min(jug1, jug2_cap - jug2)),  # Pour Jug1 → Jug2
            (jug1 + min(jug2, jug1_cap - jug1), jug2 - min(jug2, jug1_cap - jug1))   # Pour Jug2 → Jug1
        ]

        for state in states:
            if state not in visited:
                queue.append(state)
                path[state] = (jug1, jug2)

solution = water_jug_problem()
print("Steps to measure 2 liters of water:")
for step in solution:
    print(step)
